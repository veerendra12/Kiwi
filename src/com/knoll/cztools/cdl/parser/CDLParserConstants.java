/* Generated By:JJTree&JavaCC: Do not edit this line. CDLParserConstants.java */
package com.knoll.cztools.cdl.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CDLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int LINE_BREAK = 2;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int END = 9;
  /** RegularExpression Id. */
  int DIGITS = 10;
  /** RegularExpression Id. */
  int DIGIT = 11;
  /** RegularExpression Id. */
  int NONZERO_DIGIT = 12;
  /** RegularExpression Id. */
  int TEXT_LITERAL = 13;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 14;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 15;
  /** RegularExpression Id. */
  int EXPONENTIAL = 16;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 17;
  /** RegularExpression Id. */
  int PLUS = 18;
  /** RegularExpression Id. */
  int MINUS = 19;
  /** RegularExpression Id. */
  int MULTIPLY = 20;
  /** RegularExpression Id. */
  int DIVIDE = 21;
  /** RegularExpression Id. */
  int ZDIV = 22;
  /** RegularExpression Id. */
  int MOD = 23;
  /** RegularExpression Id. */
  int EXP = 24;
  /** RegularExpression Id. */
  int EQUALS = 25;
  /** RegularExpression Id. */
  int NOT_EQUALS = 26;
  /** RegularExpression Id. */
  int GT = 27;
  /** RegularExpression Id. */
  int GE = 28;
  /** RegularExpression Id. */
  int LT = 29;
  /** RegularExpression Id. */
  int LE = 30;
  /** RegularExpression Id. */
  int NOT = 31;
  /** RegularExpression Id. */
  int NOTTRUE = 32;
  /** RegularExpression Id. */
  int AND = 33;
  /** RegularExpression Id. */
  int OR = 34;
  /** RegularExpression Id. */
  int LIKE = 35;
  /** RegularExpression Id. */
  int SUBSETOF = 36;
  /** RegularExpression Id. */
  int CONSTRAIN = 37;
  /** RegularExpression Id. */
  int ADD = 38;
  /** RegularExpression Id. */
  int SUBTRACT = 39;
  /** RegularExpression Id. */
  int CONTRIBUTE = 40;
  /** RegularExpression Id. */
  int COMPATIBLE = 41;
  /** RegularExpression Id. */
  int CALL = 42;
  /** RegularExpression Id. */
  int OF = 43;
  /** RegularExpression Id. */
  int FORALL = 44;
  /** RegularExpression Id. */
  int IN = 45;
  /** RegularExpression Id. */
  int WHERE = 46;
  /** RegularExpression Id. */
  int COLLECT = 47;
  /** RegularExpression Id. */
  int DISTINCT = 48;
  /** RegularExpression Id. */
  int WHEN = 49;
  /** RegularExpression Id. */
  int WITH = 50;
  /** RegularExpression Id. */
  int TO = 51;
  /** RegularExpression Id. */
  int FROM = 52;
  /** RegularExpression Id. */
  int REQUIRES = 53;
  /** RegularExpression Id. */
  int IMPLIES = 54;
  /** RegularExpression Id. */
  int EXCLUDES = 55;
  /** RegularExpression Id. */
  int NEGATES = 56;
  /** RegularExpression Id. */
  int DEFAULTS = 57;
  /** RegularExpression Id. */
  int FUNC_PTR = 58;
  /** RegularExpression Id. */
  int DOT = 59;
  /** RegularExpression Id. */
  int COMMA = 60;
  /** RegularExpression Id. */
  int SEMICOLON = 61;
  /** RegularExpression Id. */
  int LPAREN = 62;
  /** RegularExpression Id. */
  int RPAREN = 63;
  /** RegularExpression Id. */
  int LBRACKET = 64;
  /** RegularExpression Id. */
  int RBRACKET = 65;
  /** RegularExpression Id. */
  int USER_PROP_IDENTIFIER = 66;
  /** RegularExpression Id. */
  int SYSTEM_PARAMETER = 67;
  /** RegularExpression Id. */
  int EVENT_PARAMETER = 68;
  /** RegularExpression Id. */
  int SIMPLE_IDENTIFIER = 69;
  /** RegularExpression Id. */
  int FORMAL_IDENTIFIER = 70;
  /** RegularExpression Id. */
  int QUOTED_IDENTIFIER = 71;
  /** RegularExpression Id. */
  int LETTER = 72;
  /** RegularExpression Id. */
  int LETTER_OR_DIGIT = 73;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<LINE_BREAK>",
    "\"//\"",
    "\"--\"",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "<token of kind 8>",
    "\"\\\\0\"",
    "<DIGITS>",
    "<DIGIT>",
    "<NONZERO_DIGIT>",
    "<TEXT_LITERAL>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<EXPONENTIAL>",
    "<BOOLEAN_LITERAL>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"ZDIV\"",
    "\"%\"",
    "\"^\"",
    "\"=\"",
    "\"<>\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"NOT\"",
    "\"NOTTRUE\"",
    "\"AND\"",
    "\"OR\"",
    "\"LIKE\"",
    "\"SUBSETOF\"",
    "\"CONSTRAIN\"",
    "\"ADD\"",
    "\"SUBTRACT\"",
    "\"CONTRIBUTE\"",
    "\"COMPATIBLE\"",
    "\"CALL\"",
    "\"OF\"",
    "\"FOR ALL\"",
    "\"IN\"",
    "\"WHERE\"",
    "\"COLLECT\"",
    "\"DISTINCT\"",
    "\"WHEN\"",
    "\"WITH\"",
    "\"TO\"",
    "\"FROM\"",
    "\"REQUIRES\"",
    "\"IMPLIES\"",
    "\"EXCLUDES\"",
    "\"NEGATES\"",
    "\"DEFAULTS\"",
    "\"@\"",
    "\".\"",
    "\",\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"property\"",
    "\"SYSTEM_PARAMETER\"",
    "\"EVENT_PARAMETER\"",
    "<SIMPLE_IDENTIFIER>",
    "<FORMAL_IDENTIFIER>",
    "<QUOTED_IDENTIFIER>",
    "<LETTER>",
    "<LETTER_OR_DIGIT>",
    "\":\"",
  };

}
